package test;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Queue;
import java.util.Stack;

public class Q3 {

    @SuppressWarnings({ "unchecked", "rawtypes" })
	public static double calc(String expression) {
    	ArrayList<String> tokens = splitStringToTokens(expression);
    	Queue output = inFixToPostFix(tokens);
    	Stack<String> calcStack = new Stack<String>();
    	while(!output.isEmpty())
    	{
    		String  op2, op1, cur = output.poll().toString();
    		Expression exp;
    		switch (cur) {
			case "+":
				op2 = calcStack.pop();
    			op1 = calcStack.pop();
    			exp = new Plus(new Number(Double.parseDouble(op1)), new Number(Double.parseDouble(op2)));
    			calcStack.push(String.valueOf(exp.calculate()));
				break;
			case "-":
				op2 = calcStack.pop();
    			op1 = calcStack.pop();
    			exp = new Minus(new Number(Double.parseDouble(op1)), new Number(Double.parseDouble(op2)));
    			calcStack.push(String.valueOf(exp.calculate()));
				break;
			case "*":
				op2 = calcStack.pop();
    			op1 = calcStack.pop();
    			exp = new Mul(new Number(Double.parseDouble(op1)), new Number(Double.parseDouble(op2)));
    			calcStack.push(String.valueOf(exp.calculate()));
				break;
			case "/":
				op2 = calcStack.pop();
    			op1 = calcStack.pop();
    			exp = new Div(new Number(Double.parseDouble(op1)), new Number(Double.parseDouble(op2)));
    			calcStack.push(String.valueOf(exp.calculate()));
				break;
			default:
				if(checkIsNumeric(cur))
	    		{
					calcStack.push(cur);
	    		}
				break;
			}
    	}
    	
    	return Double.parseDouble(calcStack.pop());
    }
    
    private static Queue<String> inFixToPostFix (ArrayList<String> tokens){
    	Stack<String> operators = new Stack<String>();
    	Queue<String> output = new ArrayDeque<String>();
        
    	for(String token : tokens) {
    		switch (token) {
			case "(":
				
				break;

			default:
				break;
			}
    		if (checkIsNumeric(token))
                output.add(token);
    		else if(token.equals("("))
    			operators.push(token);
    		else if(token.equals(")")){
				while(!operators.isEmpty() && !operators.peek().equals("("))
					output.add(operators.pop());
				if(!operators.isEmpty() && operators.peek().equals("("))
					operators.pop();
    		}
	        else{
	        	while (!operators.isEmpty() && checkPriority(token,operators.peek()))
	        		output.add(operators.pop());
	        	operators.add(token);
	        }
		}
		while (!operators.isEmpty()){
            output.add(operators.pop());
        }
		
		return output;
    }
 	private static ArrayList<String> splitStringToTokens(String exp){
    	String tokenString = "";
    	ArrayList<String> tokens = new ArrayList<String>();
    	
    	for (String character : exp.split("")) {
    		
    		if(checkIsNumeric(character) || character.equals("."))
    			tokenString += character;
    		else
    			tokenString += " " + character + " ";
    	}
    	
    	for (String character: tokenString.split(" ")) {
    		if(!character.equals(" ") && !character.equals(""))
    			tokens.add(character);
		}
    	
    	return tokens;
    }
	// returns true when the string is not one of the operators we support
    private static boolean checkIsNumeric(String token){
   	 return !(token.equals("+") 
   			 || token.equals("-") 
   			 || token.equals("*") 
   			 || token.equals("/") 
   			 || token.equals("(") 
   			 || token.equals(")") 
   			 || token.equals("")
   			 );
	}
	

    // Operator Map
    private static Map<String, Integer> operators = new HashMap<String, Integer>() {{
        put("+", 1);
        put("-", 2);
        put("*", 3);
        put("/", 4);
    }};
    
    //returns true when the weak operator only when the first operator is weaker then the second operator  
    private static boolean checkPriority(String op1, String op2)
    {
        return (operators.containsKey(op2) && operators.get(op2) >= operators.get(op1));
    }
   
}