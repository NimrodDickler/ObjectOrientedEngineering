package test;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Queue;
import java.util.Stack;

public class Q3 {

    @SuppressWarnings({ "unchecked", "rawtypes" })
	public static double calc(String expression) {
    	ArrayList<String> tokens = getTokenArray(expression);
    	Stack<String> operators = new Stack<String>();
    	Queue output = new ArrayDeque<String>();
        
    	for(String token : tokens) {
    		if (isNumeric(token))
                output.add(token);
    		else if(token.equals("("))
    			operators.push(token);
    		else if(token.equals(")")){
    			while(!operators.isEmpty() && !operators.peek().equals("(")){
    				output.add(operators.pop());
    			}
    	        if(!operators.isEmpty())
    	            operators.pop();
    	        else{
    	        	while (!operators.isEmpty() && isPrecedence(token,operators.peek())) {
    	        		output.add(operators.pop());
    	        	}
    	        	operators.add(token);
    	        }
    		}
    	}
    	
		while (!operators.isEmpty())
        {
            output.add(operators.pop());
        }
    	
    	return 0;
    }
    
    //Helping Methods
    
    // Creates a token array from a string
	private static ArrayList<String> getTokenArray(String exp){
		String[] characters = exp.split("");
    	String tokenString = "";
    	ArrayList<String> tokens = new ArrayList<String>();
    	
    	// check every character to see if it's a symbol, set space between numbers, ebale 2 digit numbers
    	for (String character : characters) {
    		
    		//found a number or part of a number
    		if(isNumeric(character) || character.equals("."))
    			tokenString += character;
    		else
    			tokenString += " " + character + " ";
    	}
    	characters = tokenString.split(" ");
    	
    	for (String character: characters) {
    		//added the if just in case
    		if(!character.equals(" ") || !character.equals(""))
    			tokens.add(character);
		}
    	
    	return tokens;
    }
	// returns true when the string is not one of the operators we support
    public static boolean isNumeric(String s){
   	 return !(s.equals("+") || s.equals("-") || s.equals("*") || s.equals("/") || s.equals("(") || s.equals(")") || s.equals(""));
	}
	//returns true when the weak operator only when the first operator is weaker then the second operator  
    public static boolean isPrecedence(String operator1 ,String operator2){
        return ((operator1.equals("-") || operator1.equals("+")) && (operator2.equals("/") || operator2.equals("*")));
    }
}